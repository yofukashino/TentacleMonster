export { types as DefaultTypes, components as ComponentTypes } from "replugged";
import { types as DefaultTypes } from "replugged";
export interface ElectronModule {
  architecture: string;
  asyncify: DefaultTypes.AnyFunction;
  beforeUnload: DefaultTypes.AnyFunction;
  blockDisplaySleep: DefaultTypes.AnyFunction;
  blur: DefaultTypes.AnyFunction;
  bounceDock: DefaultTypes.AnyFunction;
  buildNumber: DefaultTypes.AnyFunction;
  canBootstrapNewUpdater: DefaultTypes.AnyFunction;
  canCopyImage: DefaultTypes.AnyFunction;
  cleanupDisplaySleep: DefaultTypes.AnyFunction;
  clearCandidateGamesCallback: DefaultTypes.AnyFunction;
  close: DefaultTypes.AnyFunction;
  copy: DefaultTypes.AnyFunction;
  copyImage: DefaultTypes.AnyFunction;
  crash: DefaultTypes.AnyFunction;
  cut: DefaultTypes.AnyFunction;
  detectPid: DefaultTypes.AnyFunction;
  ensureModule: DefaultTypes.AnyFunction;
  flashFrame: DefaultTypes.AnyFunction;
  flushCookies: DefaultTypes.AnyFunction;
  flushDNSCache: DefaultTypes.AnyFunction;
  flushStorageData: DefaultTypes.AnyFunction;
  focus: DefaultTypes.AnyFunction;
  fullscreen: DefaultTypes.AnyFunction;
  generateSessionFromPid: DefaultTypes.AnyFunction;
  getAudioPid: DefaultTypes.AnyFunction;
  getCloudSync: DefaultTypes.AnyFunction;
  getCrashReporterMetadata: DefaultTypes.AnyFunction;
  getDesktopSourceFromPid: DefaultTypes.AnyFunction;
  getDiscordMemoryUsage: DefaultTypes.AnyFunction;
  getDiscordUtils: DefaultTypes.AnyFunction;
  getDispatch: DefaultTypes.AnyFunction;
  getEnableHardwareAcceleration: DefaultTypes.AnyFunction;
  getGPUDriverVersions: DefaultTypes.AnyFunction;
  getGameUtils: DefaultTypes.AnyFunction;
  getIdleMilliseconds: DefaultTypes.AnyFunction;
  getPidFromDesktopSource: DefaultTypes.AnyFunction;
  getSetting: DefaultTypes.AnyFunction;
  getVoiceEngine: DefaultTypes.AnyFunction;
  inputEventRegister: DefaultTypes.AnyFunction;
  inputEventUnregister: DefaultTypes.AnyFunction;
  invoke: DefaultTypes.AnyFunction;
  isAlwaysOnTop: DefaultTypes.AnyFunction;
  isSystemDarkMode: DefaultTypes.AnyFunction;
  makeChunkedRequest: DefaultTypes.AnyFunction;
  maximize: DefaultTypes.AnyFunction;
  minimize: DefaultTypes.AnyFunction;
  moduleVersions: DefaultTypes.AnyFunction;
  on: DefaultTypes.AnyFunction;
  paste: DefaultTypes.AnyFunction;
  purgeMemory: DefaultTypes.AnyFunction;
  readClipboard: DefaultTypes.AnyFunction;
  relaunch: DefaultTypes.AnyFunction;
  releaseChannel: DefaultTypes.AnyFunction;
  requireModule: DefaultTypes.AnyFunction;
  restore: DefaultTypes.AnyFunction;
  saveFile: DefaultTypes.AnyFunction;
  saveImage: DefaultTypes.AnyFunction;
  send: DefaultTypes.AnyFunction;
  setAlwaysOnTop: DefaultTypes.AnyFunction;
  setApplicationBackgroundColor: DefaultTypes.AnyFunction;
  setBackgroundThrottling: DefaultTypes.AnyFunction;
  setBadge: DefaultTypes.AnyFunction;
  setCandidateGamesCallback: DefaultTypes.AnyFunction;
  setCrashInformation: DefaultTypes.AnyFunction;
  setEnableHardwareAcceleration: DefaultTypes.AnyFunction;
  setFocused: DefaultTypes.AnyFunction;
  setForegroundProcess: DefaultTypes.AnyFunction;
  setGameCandidateOverrides: DefaultTypes.AnyFunction;
  setObservedGamesCallback: DefaultTypes.AnyFunction;
  setOnInputEventCallback: DefaultTypes.AnyFunction;
  setSystemTrayApplications: DefaultTypes.AnyFunction;
  setSystemTrayIcon: DefaultTypes.AnyFunction;
  setThumbarButtons: DefaultTypes.AnyFunction;
  setZoomFactor: DefaultTypes.AnyFunction;
  shouldDisplayNotifications: DefaultTypes.AnyFunction;
  showOpenDialog: DefaultTypes.AnyFunction;
  submitLiveCrashReport: DefaultTypes.AnyFunction;
  supportsFeature: DefaultTypes.AnyFunction;
  unblockDisplaySleep: DefaultTypes.AnyFunction;
  undetectPid: DefaultTypes.AnyFunction;
  updateCrashReporter: DefaultTypes.AnyFunction;
}
export interface TransportArg {
  attenuation?: boolean;
  attenuateWhileSpeakingSelf: boolean;
  attenuateWhileSpeakingOthers?: boolean;
  attenuationFactor: number;
  prioritySpeakerDucking?: number;
  audioEncoder: {
    channels: number;
    freq: number;
    rate: number;
  };
  fec: boolean;
  encodingVoiceBitRate: number;
}
